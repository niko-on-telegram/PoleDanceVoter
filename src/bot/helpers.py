import logging
import random

from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.internal.hello_img import logo_label
from bot.keyboards.contestant_choose import contestant_keyboard
from bot.keyboards.contestant_list import get_contestant_list
from database.crud.contestant import get_all_contestants, get_competitor_from_db, get_resource
from database.crud.votes import get_all_votes_ids


async def print_profile(message: Message, contestant_id: int, db_session: AsyncSession, state: FSMContext):
    contestant = await get_competitor_from_db(contestant_id, db_session)

    photos_list = [InputMediaPhoto(media=photo) for photo in contestant.photos.split(", ")]
    msg_list = []
    message = await message.answer_photo(contestant.poster)
    msg_list.append(message.message_id)
    messages = await message.answer_media_group(media=photos_list)
    msg_list.extend(message.message_id for message in messages)
    message = await message.answer(contestant.info)
    msg_list.append(message.message_id)
    message = await message.answer_video(contestant.presentation, protect_content=True)
    msg_list.append(message.message_id)
    message = await message.answer_video(contestant.dance_cut, protect_content=True)
    msg_list.append(message.message_id)
    message = await message.answer_video(contestant.dance_uncut, protect_content=True)
    msg_list.append(message.message_id)
    message = await message.answer_video(contestant.video_mid, protect_content=True)
    msg_list.append(message.message_id)

    already_voted = False
    voters = await get_all_votes_ids(message.chat.id, db_session)
    for voter in voters:
        if voter.competitor_id == contestant_id:
            already_voted = True

    reply_markup = contestant_keyboard(contestant_id, already_voted)

    message = await message.answer_video(contestant.video_pro, reply_markup=reply_markup, protect_content=True)
    msg_list.append(message.message_id)

    logging.debug(f"{message.chat.id=} {msg_list=}")
    await state.update_data(msg_ids=msg_list)


async def print_constestant_list(message: Message, db_session: AsyncSession):
    main_message = """–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –ü—Ä–æ–µ–∫—Ç–∞ "–ü–ò–õ–û–ù–∏–Ø –ò—â–µ—Ç –ü—Ä–µ–∑–µ–Ω—Ç—ë—Ä–æ–≤" –Ω–∞—á–∞–ª—Å—è!

üëâ –£—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–∞ –ª—é–¥–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª @pdcamp

üëâ –í—ã –î–û–õ–ñ–ù–´ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ 3—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –≤–∞—à –≥–æ–ª–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç

üëâ –°—É–¥—å—è —Ç–∞–∫ –∂–µ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ 3—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞. 1 –≥–æ–ª–æ—Å —Å—É–¥—å–∏ = 50 –≥–æ–ª–æ—Å–∞–º –∑—Ä–∏—Ç–µ–ª–µ–π

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫–∞–∫ –∑—Ä–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å—É–¥–µ–π, —Ç–∞–∫ –∏, –Ω–∞–æ–±–æ—Ä–æ—Ç

–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ 22 –Ω–æ—è–±—Ä—è 2024 üéÜ"""

    contestants = await get_all_contestants(db_session)
    random.Random(hash(message.chat.id)).shuffle(contestants)
    logo_id = await get_resource(logo_label, db_session)
    await message.answer_photo(
        photo=logo_id,
        caption=main_message,
        reply_markup=get_contestant_list(contestants),
    )
